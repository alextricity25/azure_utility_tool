"""
Author: Miguel Alex Cantu
Email: miguel.can2@gmail.com
Date: 12/21/2019
Description:
    This script generates a day-by-day breakdown of the MFA progress for each
    usageLocation attribute that is found in the MFA reports generated by
    the list_all_users_mfa action
"""

import csv
from os import listdir
from os.path import isfile, join

# Variables
schema = {}

reports_base_dir = "/mfa_reports/csv"

paths_to_reports = [join(reports_base_dir, f) for f in listdir(reports_base_dir) if isfile(join(reports_base_dir, f))]

# Filter out files that were note generated by the 'list_all_users_mfa' action
paths_to_reports = [f for f in paths_to_reports if "list_all_users_mfa" in f]

# Methods
def populate_schema():
    for file_path in paths_to_reports:
        date = file_path.split('_')[-1][:-4]
        usage_locations = {}
        schema[date] = usage_locations
        all_eligible_accounts = 0
        all_enforced_accounts = 0
        with open(file_path) as csvfile:
            mfa_report_reader = csv.reader(csvfile, dialect='excel')
            for row in mfa_report_reader:
                if row[8] not in usage_locations.keys():
                    usage_locations[row[8]] = {
                            'eligible_accounts': 0,
                            'enforced_accounts': 0
                            }
                else:
                    usage_locations[row[8]] = {
                            'eligible_accounts': usage_locations[row[8]].get('eligible_accounts', 0),
                            'enforced_accounts': usage_locations[row[8]].get('enforced_accounts', 0),
                            }
                # If it's an eligiable account, then increment all_eligible_accounts
                enabled = row[0]
                source = row[17]
                if enabled == 'True' and source != 'Service':
                    usage_locations[row[8]]['eligible_accounts'] += 1
                # If account is enforced, then increment all_enforced_accounts
                if row[-1] == 'True':
                    usage_locations[row[8]]['enforced_accounts'] += 1
    print(schema)

# Main program
# Populating schema
populate_schema()



def generate_header():
    pass

def generate_csv():
    pass

def calculate_percentage():
    pass

